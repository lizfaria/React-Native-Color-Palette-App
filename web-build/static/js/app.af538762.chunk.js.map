{"version":3,"sources":["components/PalettePreview.tsx","screens/Home.tsx","components/ColorBox.tsx","screens/ColorPalette.tsx","screens/AddNewPaletteModal.tsx","App.js"],"names":["styles","StyleSheet","create","text","fontWeight","fontSize","marginBottom","box","height","width","marginRight","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","list","PalettePreview","handlePress","colorPaletteItem","TouchableOpacity","onPress","Text","style","paletteName","FlatList","horizontal","data","colors","slice","keyExtractor","item","index","hex","renderItem","View","backgroundColor","padding","button","buttonText","color","Home","navigation","route","newPalette","params","useState","palettes","setPalettes","isRefreshing","setIsRefreshing","name","allColors","setAllColors","handleFetchPalettes","useCallback","a","async","Promise","all","fetch","results","json","risoColors","paperColors","console","log","useEffect","handleRefresh","setTimeout","currentPalette","navigate","refreshing","onRefresh","borderRadius","justifyContent","alignItems","ColorBox","props","colorStyle","hexCode","textColor","parseInt","replace","colorName","container","flex","paddingTop","paddingHorizontal","paddingBottom","heading","ColorPalette","input","borderWidth","borderColor","margin","switch","flexDirection","borderBottomColor","borderBottomWidth","marginVertical","buttonWrapper","marginHorizontal","AddNewPaletteModal","setPaletteName","selectedColors","setSelectedColors","handleSubmit","Alert","alert","TextInput","onChangeText","value","Switch","find","onValueChange","newValue","current","filter","c","handleUpdate","RootStack","createStackNavigator","MainStack","MainStackScreen","Navigator","Screen","component","options","title","App","NavigationContainer","mode","headerShown"],"mappings":"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","file":"static/js/app.af538762.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport {\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  FlatList,\n  View,\n} from 'react-native';\nimport { ColorPaletteType } from '../shared/types';\n\ninterface PalettePreviewProps {\n  handlePress: () => void;\n  colorPaletteItem: ColorPaletteType;\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontWeight: 'bold',\n    fontSize: 18,\n    marginBottom: 10,\n  },\n  box: {\n    height: 30,\n    width: 30,\n    marginRight: 10,\n    shadowColor: '#000', //iOS only\n    shadowOffset: { width: 0, height: 1 }, // iOS only\n    shadowOpacity: 0.3, // iOS only,\n    shadowRadius: 1, //iOS only\n    elevation: 2, //android only\n  },\n  list: {\n    marginBottom: 20,\n  },\n});\n\nconst PalettePreview: FC<PalettePreviewProps> = ({\n  handlePress,\n  colorPaletteItem,\n}) => {\n  return (\n    <TouchableOpacity onPress={handlePress}>\n      <Text style={styles.text}>{colorPaletteItem.paletteName}</Text>\n      <FlatList\n        style={styles.list}\n        horizontal\n        data={colorPaletteItem.colors.slice(0, 8)}\n        keyExtractor={(item, index) => item.hex + '_' + index}\n        renderItem={({ item }) => (\n          <View style={[styles.box, { backgroundColor: item.hex }]} />\n        )}\n      />\n    </TouchableOpacity>\n  );\n};\n\nexport default PalettePreview;\n","import React, { FC, useEffect, useState, useCallback } from 'react';\nimport { FlatList, StyleSheet, TouchableOpacity, Text } from 'react-native';\nimport { ColorPaletteType, Color } from '../shared/types';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { RootStackParamList } from '../shared/types';\nimport PalettePreview from '../components/PalettePreview';\n\ntype HomeScreenNavigationProp = StackNavigationProp<RootStackParamList>;\ntype HomeScreenRouteProp = RouteProp<RootStackParamList, 'Home'>;\n\ntype HomeProps = {\n  navigation: HomeScreenNavigationProp;\n  route: HomeScreenRouteProp;\n};\n\nconst Home: FC<HomeProps> = ({ navigation, route }) => {\n  const newPalette = route.params ? route.params.newPalette : null;\n  const [palettes, setPalettes] = useState<ColorPaletteType[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [allColors, setAllColors] = useState<Color[]>([\n    { name: 'AliceBlue', hex: '#F0F8FF' },\n  ]);\n  const handleFetchPalettes = useCallback(async () => {\n    try {\n      const results = await Promise.all([\n        fetch(\n          'https://raw.githubusercontent.com/mattdesl/riso-colors/master/riso-colors.json',\n        ),\n        fetch(\n          'https://raw.githubusercontent.com/mattdesl/paper-colors/master/paper-colors.json',\n        ),\n      ]);\n      const risoColors: Color[] = await results[0].json();\n      const paperColors: Color[] = await results[1].json();\n      setPalettes([\n        { paletteName: 'Riso', colors: risoColors },\n        { paletteName: 'Paper', colors: paperColors },\n      ]);\n      setAllColors([...risoColors, ...paperColors]);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  useEffect(() => {\n    handleFetchPalettes();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleRefresh = useCallback(async () => {\n    setIsRefreshing(true);\n    await handleFetchPalettes();\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (newPalette) {\n      setPalettes((currentPalette) => [newPalette, ...currentPalette]);\n    }\n  }, [newPalette]);\n\n  return (\n    <>\n      <TouchableOpacity\n        style={styles.button}\n        onPress={() => navigation.navigate('AddNewPalette', { allColors })}\n      >\n        <Text style={styles.buttonText}>Add a color scheme</Text>\n      </TouchableOpacity>\n      <FlatList\n        refreshing={isRefreshing}\n        onRefresh={handleRefresh}\n        data={palettes}\n        style={styles.list}\n        keyExtractor={(item) => item.paletteName}\n        renderItem={({ item }) => (\n          <PalettePreview\n            handlePress={() => navigation.navigate('ColorPalette', item)}\n            colorPaletteItem={item}\n          />\n        )}\n      />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  list: {\n    padding: 10,\n    backgroundColor: '#fff',\n  },\n  button: {\n    height: 50,\n    backgroundColor: 'white',\n    padding: 10,\n  },\n  buttonText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#484d7a',\n  },\n});\n\nexport default Home;\n","import React, { FC } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface ColorBoxProps {\n  hexCode: string;\n  colorName: string;\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    padding: 10,\n    borderRadius: 3,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  text: {\n    fontWeight: 'bold',\n  },\n});\n\nconst ColorBox: FC<ColorBoxProps> = (props) => {\n  const colorStyle = {\n    backgroundColor: props.hexCode,\n  };\n  const textColor = {\n    color:\n      parseInt(props.hexCode.replace('#', ''), 16) > 0xffffff / 1.1\n        ? '#000'\n        : '#fff',\n  };\n\n  return (\n    <View style={[styles.box, colorStyle]}>\n      {/* TODO: copy the hex code of a color to clipboard when the user taps on it (Clipboard component) */}\n      <Text style={(styles.text, textColor)}>\n        {props.colorName} {props.hexCode}\n      </Text>\n    </View>\n  );\n};\n\nexport default ColorBox;\n","import React, { FC } from 'react';\nimport { RouteProp } from '@react-navigation/native';\nimport { StyleSheet, FlatList } from 'react-native';\nimport ColorBox from '../components/ColorBox';\nimport { RootStackParamList } from '../shared/types';\n\ntype ColorPaletteScreenRouteProp = RouteProp<\n  RootStackParamList,\n  'ColorPalette'\n>;\n\ninterface ColorPaletteProps {\n  route: ColorPaletteScreenRouteProp;\n}\n\nconst ColorPalette: FC<ColorPaletteProps> = ({ route }) => {\n  const { colors } = route.params;\n  return (\n    <FlatList\n      style={styles.container}\n      keyExtractor={(item, index) => item.hex + '_' + index}\n      data={colors}\n      renderItem={({ item }) => (\n        <ColorBox colorName={item.name} hexCode={item.hex} />\n      )}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 50,\n    paddingHorizontal: 10,\n    paddingBottom: 10,\n    backgroundColor: '#fff',\n  },\n  heading: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n});\n\nexport default ColorPalette;\n","import React, { FC, useState, useCallback } from 'react';\nimport { Color } from '../shared/types';\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n  Switch,\n  FlatList,\n} from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { RootStackParamList } from '../shared/types';\n\ntype NewPaletteModalNavigationProp = StackNavigationProp<RootStackParamList>;\ntype NewPaletteModalRouteProp = RouteProp<RootStackParamList, 'AddNewPalette'>;\n\ntype NewPaletteModalProps = {\n  navigation: NewPaletteModalNavigationProp;\n  route: NewPaletteModalRouteProp;\n};\n\nconst AddNewPaletteModal: FC<NewPaletteModalProps> = ({\n  navigation,\n  route,\n}) => {\n  const { allColors } = route.params;\n\n  const [paletteName, setPaletteName] = useState<string>('Palette name');\n  const [selectedColors, setSelectedColors] = useState<Color[]>([]);\n\n  const handleUpdate = (color: Color, newValue: boolean) => {\n    if (newValue === true) {\n      setSelectedColors((current) => [...current, color]);\n    } else {\n      setSelectedColors((current) =>\n        current.filter((c) => c.name !== color.name),\n      );\n    }\n  };\n\n  const handleSubmit = useCallback(() => {\n    if (!paletteName) {\n      return Alert.alert('Please enter a palette name');\n    }\n    const newPalette = {\n      paletteName,\n      colors: selectedColors,\n    };\n    navigation.navigate('Home', {\n      newPalette,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paletteName]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.heading}>\n        <Text>Name of your color palette</Text>\n        <TextInput\n          style={styles.input}\n          onChangeText={setPaletteName}\n          value={paletteName}\n        />\n      </View>\n\n      {/* TODO: display a preview of the colors so the user can see what they're picking */}\n      <FlatList\n        style={styles.list}\n        data={allColors}\n        keyExtractor={(item: Color, index) => item.name + '_' + index}\n        renderItem={({ item }) => (\n          <View style={styles.switch}>\n            <Text>{item.name}</Text>\n            <Switch\n              value={!!selectedColors.find((color) => color.name === item.name)}\n              onValueChange={(newValue) => handleUpdate(item, newValue)}\n            />\n          </View>\n        )}\n      />\n      {/* TODO: disable the button if the form is invalid */}\n      <TouchableOpacity style={styles.buttonWrapper} onPress={handleSubmit}>\n        <View style={styles.button}>\n          <Text style={styles.buttonText}>Submit Palette</Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    flex: 1,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#cdcad5',\n    padding: 10,\n    margin: 10,\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  switch: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 10,\n    borderBottomColor: '#cdcad5',\n    borderBottomWidth: 1,\n  },\n  list: {\n    paddingHorizontal: 10,\n    marginVertical: 10,\n  },\n  heading: {\n    padding: 10,\n  },\n  buttonWrapper: {\n    height: 100,\n    marginHorizontal: 10,\n  },\n  button: {\n    height: 40,\n    backgroundColor: '#9c96cd',\n    borderRadius: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n\nexport default AddNewPaletteModal;\n","import 'react-native-gesture-handler';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Home from './screens/Home';\nimport ColorPalette from './screens/ColorPalette';\nimport AddNewPaletteModal from './screens/AddNewPaletteModal';\n\nconst RootStack = createStackNavigator();\nconst MainStack = createStackNavigator();\n\nconst MainStackScreen = () => {\n  return (\n    <MainStack.Navigator>\n      <MainStack.Screen name=\"Home\" component={Home} />\n      <MainStack.Screen\n        name=\"ColorPalette\"\n        component={ColorPalette}\n        options={({ route }) => ({ title: route.params.paletteName })}\n      />\n    </MainStack.Navigator>\n  );\n};\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator mode=\"modal\">\n        <RootStack.Screen\n          name=\"Main\"\n          component={MainStackScreen}\n          // avoid two top navs\n          options={{ headerShown: false }}\n        />\n        <RootStack.Screen name=\"AddNewPalette\" component={AddNewPaletteModal} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}